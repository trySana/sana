#!/bin/bash

# Script de lancement Docker pour Sana
# Usage: ./scripts/launch-docker.sh

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

echo "üê≥ Lancement de Sana avec Docker..."
echo "=================================="

# V√©rifier que Docker est install√©
if ! command -v docker &> /dev/null; then
    print_error "Docker n'est pas install√©"
    echo "Installez Docker depuis : https://docs.docker.com/get-docker/"
    exit 1
fi

# V√©rifier que Docker Compose est install√©
if ! command -v docker-compose &> /dev/null; then
    print_error "Docker Compose n'est pas install√©"
    echo "Installez Docker Compose depuis : https://docs.docker.com/compose/install/"
    exit 1
fi

# V√©rifier que les ports sont libres
print_info "V√©rification des ports..."

if netstat -tulpn 2>/dev/null | grep -q ":8000"; then
    print_warning "Port 8000 occup√©"
    read -p "Voulez-vous arr√™ter le processus qui utilise le port 8000 ? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        sudo lsof -ti:8000 | xargs kill -9 2>/dev/null || true
        print_success "Port 8000 lib√©r√©"
    else
        print_error "Impossible de continuer avec le port 8000 occup√©"
        exit 1
    fi
fi

if netstat -tulpn 2>/dev/null | grep -q ":27017"; then
    print_warning "Port 27017 occup√©"
    read -p "Voulez-vous arr√™ter le processus qui utilise le port 27017 ? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        sudo lsof -ti:27017 | xargs kill -9 2>/dev/null || true
        print_success "Port 27017 lib√©r√©"
    else
        print_error "Impossible de continuer avec le port 27017 occup√©"
        exit 1
    fi
fi

# V√©rifier le fichier .env
if [ ! -f "backend/.env" ]; then
    print_warning "Fichier .env non trouv√©"
    if [ -f "backend/.env.example" ]; then
        print_info "Cr√©ation du fichier .env √† partir de .env.example"
        cp backend/.env.example backend/.env
        print_warning "‚ö†Ô∏è  IMPORTANT : Configurez vos cl√©s API dans backend/.env"
        print_info "  ‚Ä¢ OpenAI : https://platform.openai.com/api-keys"
        print_info "  ‚Ä¢ ElevenLabs : https://elevenlabs.io/app/api-key"
        echo ""
        read -p "Appuyez sur Entr√©e apr√®s avoir configur√© vos cl√©s API..."
    else
        print_error "Fichier .env.example non trouv√©"
        exit 1
    fi
fi

# V√©rifier que les cl√©s API sont configur√©es
if grep -q "your_openai_api_key_here" backend/.env; then
    print_warning "Cl√©s API non configur√©es dans .env"
    print_info "Configurez vos cl√©s API avant de continuer"
    exit 1
fi

# Arr√™ter les conteneurs existants s'ils existent
print_info "Nettoyage des conteneurs existants..."
docker-compose down 2>/dev/null || true

# Construire et d√©marrer les services
print_info "Construction et d√©marrage des services..."
docker-compose up --build -d

# Attendre que les services soient pr√™ts
print_info "Attente que les services soient pr√™ts..."
sleep 10

# V√©rifier que les services fonctionnent
print_info "V√©rification des services..."

# V√©rifier MongoDB
if docker exec sana-mongodb mongosh --eval "db.runCommand('ping')" &>/dev/null; then
    print_success "MongoDB fonctionne"
else
    print_error "MongoDB ne r√©pond pas"
    docker-compose logs mongodb
    exit 1
fi

# V√©rifier le backend
if curl -f http://localhost:8000/ &>/dev/null; then
    print_success "Backend fonctionne"
else
    print_error "Backend ne r√©pond pas"
    docker-compose logs backend
    exit 1
fi

echo ""
print_success "üéâ Sana est pr√™t !"
echo ""
print_info "Services disponibles :"
echo "  ‚Ä¢ Backend API : http://localhost:8000"
echo "  ‚Ä¢ Documentation API : http://localhost:8000/docs"
echo "  ‚Ä¢ MongoDB : localhost:27017"
echo ""
print_info "Commandes utiles :"
echo "  ‚Ä¢ Voir les logs : docker-compose logs -f"
echo "  ‚Ä¢ Arr√™ter : docker-compose down"
echo "  ‚Ä¢ Red√©marrer : docker-compose restart"
echo "  ‚Ä¢ Reconstruire : docker-compose up --build"
echo ""
print_info "Pour lancer le frontend :"
echo "  cd frontend && pnpm start"
echo ""
print_warning "‚ö†Ô∏è  Gardez ce terminal ouvert pour voir les logs en temps r√©el"
echo "Appuyez sur Ctrl+C pour arr√™ter les services"

# Afficher les logs en temps r√©el
docker-compose logs -f
